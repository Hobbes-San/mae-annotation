#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""
This program is to:
Fix syntax errors in XML files generated by MAE 1.x-2.0.2, regarding special
characters ("predefined entities") that need to be 'escaped'.
That is, five characters (< > ' " &) should not be used in XML attribute values, and
need to be replaced with their escaped forms (&lt; &gt; &apos; &quot; &amp;).

"""
import sys
import re
import os
from os.path import join as pjoin

reload(sys)
sys.setdefaultencoding('utf8')

__author__ = 'Keigh Rim'
__date__ = '4/2/16'
__email__ = 'krim@brandeis.edu'


def batch_escape_files(directory, suffix='_fixed'):
    for filename in os.listdir(directory):
        abs_name = os.path.abspath(pjoin(directory, filename))
        escape_file(abs_name, suffix)


def escape_file(filename, suffix='_fixed'):
    basename, ext = os.path.splitext(filename)
    outf_name = basename + suffix + ext
    with open(filename) as xml_file, open(outf_name, "w") as out_file:
        out_file.write(escape_xml(xml_file.readlines()))


def escape_xml(xml_str):
    lines = []
    nontag = True
    if isinstance(xml_str, str): xml_str = xml_str.split("\n")
    line_iter = iter(xml_str)
    for line in line_iter:
        line = line.strip()
        if line == "</TAGS>": nontag = True
        if nontag:
            lines.append(line)
        else:
            while not line.endswith(" />"):
                line += " " + line_iter.next()
            lines.append(escape_tag(line))
        if line == "<TAGS>": nontag = False
    return "\n".join(lines)


def escape_tag(tag_xml_str):
    un_bracket = re.match(r"^<\s*(.+)\s*/>\s*$", tag_xml_str).group(1)
    tag_name = un_bracket.split()[0]
    tag_id = un_bracket.split()[1].split("=")[1][1:-1]
    rest = "\" " + " ".join(un_bracket.split()[2:])
    seen = 0
    attributes = []
    while seen < len(rest):
        att_name, att_val, rest_of_str = get_next_att(rest[seen:])
        attributes.append("{}=\"{}\"".format(att_name, escape_attval(att_val)))
        seen += rest_of_str
    return "<{} id=\"{}\" {} />".format(tag_name, tag_id, " ".join(attributes))


def get_next_att(text):
    att_name_pat = re.compile(r'\" [^\s\"]+=\"')
    start = (re.search(att_name_pat, text).start())
    end = (re.search(att_name_pat, text).end())
    att_name = text[start + 2:end - 2]
    next_att = re.search(att_name_pat, text[end:])
    if next_att:
        next_start = (re.search(att_name_pat, text[end:]).start()) + end
        att_val = text[end:next_start]
    else:
        next_start = len(text)
        att_val = text[end:-1]
    return att_name, att_val, next_start


def escape_attval(att_val):
    att_val = att_val.replace("\n", " ") \
        .replace("&", "&amp;") \
        .replace("&amp;amp;", "&amp;") \
        .replace("<", "&lt;") \
        .replace(">", "&gt;") \
        .replace("\"", "&quot;") \
        .replace("'", "&apos;");
    return att_val;


if __name__ == '__main__':
    if len(sys.argv) == 1 or len(sys.argv) > 3:
        print("""Usage:
        python {} input (suffix)
        - input: can be a XML filename or directory contains multiple XML files
        - suffix: (optional) fixed output file get this (default='_fixed')
        """.format(os.path.basename(__file__)))
        exit(0)
    inf = sys.argv[1]
    if len(sys.argv) == 3:
        suffix = sys.argv[2]
    else:
        suffix = '_fixed'
    if os.path.isdir(inf):
        batch_escape_files(inf, suffix)
    else:
        escape_file(inf, suffix)
